<?php
// Exit if accessed directly.
if (!defined('ABSPATH')) {
    exit;
}

/**
 * MH_Admin_Menu Class
 * This class handles the creation of the admin menu, registration of settings,
 * and enqueuing of assets (CSS/JS) for the admin dashboard.
 */
class MH_Admin_Menu {

    /**
     * Constructor.
     * WordPress hooks are placed here to initialize the admin functionality.
     */
    public function __construct() {
        // 'admin_menu' hook is used to add new items to the WordPress admin menu.
        add_action('admin_menu', [$this, 'register_menu']);

        // 'admin_init' hook is used to register our plugin's settings so WordPress can save them.
        add_action('admin_init', [$this, 'register_settings']);

        // This is our final, most direct method for adding styles.
        add_action('admin_head', [$this, 'add_final_inline_styles']);

        // 'admin_enqueue_scripts' hook is for adding CSS and JavaScript to the admin pages.
        add_action('admin_enqueue_scripts', [$this, 'enqueue_admin_assets']);
    }

    /**
     * Register the admin menu and submenus.
     */
    public function register_menu() {
        // add_menu_page() creates the main top-level menu item.
        // ... inside the register_menu() function
        add_menu_page(
            esc_html__('MH Plug Settings', 'mh-plug'), // Page Title
            esc_html__('MH Plug', 'mh-plug'),          // Menu Title
            'manage_options',                         // Capability required to see this menu
            'mh-plug-settings',                       // Menu Slug (unique identifier)
            [$this, 'render_settings_page'],          // Function that displays the page content
            'dashicons-admin-generic',                // This MUST be a placeholder Dashicon
            58                                        // Position in the menu
        );
    }
    /**
     * This function injects all necessary CSS directly into the admin page <head>.
     * It uses absolute URLs and !important tags to guarantee it works.
     */
    public function add_final_inline_styles() {
        // We only want these styles on our plugin's settings page for efficiency.
        $screen = get_current_screen();
        if (!$screen || strpos($screen->id, 'mh-plug') === false) {
            // However, for the menu icon, we need it on ALL admin pages.
            // So we will only wrap the page-specific styles in the check.
        }

        ?>
        <style id="mh-plug-final-styles">
            /*
             * === FINAL ICON STYLES (APPLIES ON ALL ADMIN PAGES) ===
             */

            /* Default (Inactive) State */
            #adminmenu #toplevel_page_mh-plug-settings .wp-menu-image {
                /* Use the full, absolute URL to the icon, generated by PHP */
                background-image: url('<?php echo esc_url(MH_PLUG_URL . 'admin/assets/images/MH-icon.png'); ?>') !important;
                background-repeat: no-repeat !important;
                background-position: center center !important;
                background-size: 20px auto !important;
            }

            /* Hide the placeholder Dashicon character */
            #adminmenu #toplevel_page_mh-plug-settings .wp-menu-image::before {
                content: '' !important;
            }

            /*
             * === FINAL HOVER/ACTIVE STATE STYLES ===
             */

            /* This is the rule you confirmed works for the background */
            #adminmenu li#toplevel_page_mh-plug-settings:hover a,
            #adminmenu li.current#toplevel_page_mh-plug-settings a,
            #adminmenu li.wp-has-current-submenu#toplevel_page_mh-plug-settings a {
                background: #004265 !important;
                color: #fff !important;
            }

            /* This ensures the icon stays visible on the new background */
            #adminmenu li#toplevel_page_mh-plug-settings:hover .wp-menu-image,
            #adminmenu li.current#toplevel_page_mh-plug-settings .wp-menu-image,
            #adminmenu li.wp-has-current-submenu#toplevel_page_mh-plug-settings .wp-menu-image {
                 background-image: url('<?php echo esc_url(MH_PLUG_URL . 'admin/assets/images/MH-icon.png'); ?>') !important;
            }
        </style>
        <?php
    }

    /**
     * Enqueue admin-specific CSS and JavaScript files.
     * @param string $hook The hook suffix of the current admin page.
     */
    public function enqueue_admin_assets($hook) {
        // We only want to load our styles and scripts on our plugin's page, not on all admin pages.
        // This check ensures the assets are loaded only when the page slug matches.
        if ('toplevel_page_mh-plug-settings' !== $hook) {
            return;
        }

        // Enqueue the CSS file for styling the settings page.
        wp_enqueue_style('mh-plug-admin-styles', MH_PLUG_URL . 'admin/assets/css/admin-styles.css', [], MH_PLUG_VERSION);

        // Enqueue the JavaScript file for the accordion functionality.
        wp_enqueue_script('mh-plug-admin-scripts', MH_PLUG_URL . 'admin/assets/js/admin-scripts.js', ['jquery'], MH_PLUG_VERSION, true);
    }

    /**
     * Render the main settings page.
     * This function simply includes the file that contains the HTML for the page.
     */
    public function render_settings_page() {
        require_once MH_PLUG_PATH . 'admin/settings-page.php';
    }

    /**
     * Register the settings fields for our plugin.
     * This tells WordPress about the options we want to save in the database.
     */
    public function register_settings() {
        // register_setting() creates a new setting that WordPress will handle and save.
        register_setting(
            'mh_plug_settings_group',  // A group name for all our settings.
            'mh_plug_widgets_settings' // The name of the option that will be stored in the wp_options table.
        );

        // add_settings_section() creates a section on the settings page.
        add_settings_section(
            'mh_plug_widgets_section',
            null, // The title is handled by the accordion, so we leave this null.
            null,
            'mh-plug-settings-page' // The page slug where this section will be displayed.
        );

        // An array of all our widgets to create a toggle switch for each one.
        $widgets = [
            'mh_heading'      => __('Advanced Heading', 'mh-plug'),
            'mh_button'       => __('Advanced Button', 'mh-plug'),
            'mh_post_slider'  => __('Post Slider', 'mh-plug'),
            'mh_post'         => __('Post Grid', 'mh-plug'),
            'mh_testimonials' => __('Testimonials', 'mh-plug'),
        ];

        // Loop through the widgets and create a settings field for each.
        foreach ($widgets as $id => $label) {
            // add_settings_field() adds a single setting field to a section.
            add_settings_field(
                $id,
                $label,
                [$this, 'render_widget_toggle_field'], // The function that renders the HTML for the field.
                'mh-plug-settings-page',
                'mh_plug_widgets_section',
                ['id' => $id, 'label' => $label] // Arguments to pass to the render function.
            );
        }
    }

    /**
     * Render the HTML for the on/off toggle switch.
     * @param array $args Arguments passed from add_settings_field().
     */
    public function render_widget_toggle_field($args) {
        // Get the saved options from the database.
        $options = get_option('mh_plug_widgets_settings');
        $id = esc_attr($args['id']);
        // Check if the option is saved and set to 1. If not set yet, default to 'checked'.
        $checked = isset($options[$id]) ? checked($options[$id], 1, false) : 'checked';

        // Echo the HTML for the widget card and toggle switch.
        echo "<div class='mh-widget-card'>";
        echo "  <div class='mh-widget-card-header'>";
        echo "      <div class='mh-widget-title'>" . esc_html($args['label']) . "</div>";
        echo "      <label class='mh-switch'>";
        echo "          <input type='checkbox' name='mh_plug_widgets_settings[{$id}]' value='1' {$checked} />";
        echo "          <span class='mh-slider mh-round'></span>";
        echo "      </label>";
        echo "  </div>";
        echo "</div>";
    }
}

// Instantiate the class to make it run.
new MH_Admin_Menu();